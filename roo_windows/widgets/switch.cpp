#include "switch.h"

#include <Arduino.h>

#include "roo_display/image/image.h"
#include "roo_display/internal/raw_streamable_overlay.h"
#include "roo_display/ui/tile.h"

using namespace roo_display;

namespace roo_windows {

namespace {
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
circle_18();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
circle_24();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
circle_36();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
circle_48();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
shadow_18();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
shadow_24();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
shadow_36();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
shadow_48();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
slider_18();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
slider_24();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
slider_36();
const ::roo_display::RleImage4bppxBiased<::roo_display::Alpha4,
                                         ::roo_display::PrgMemResource>&
slider_48();

static constexpr int kSwitchAnimationMs = 120;
}  // namespace

bool Switch::onSingleTapUp(XDim x, YDim y) {
  toggle();
  anim_ = millis() & 0x7FFF;
  return Widget::onSingleTapUp(x, y);
}

int16_t Switch::time_animating_ms() const {
  return (millis() & 0x7FFF) - (anim_ & 0x7FFF);
}

void Switch::paintWidgetContents(const Canvas& canvas, Clipper& clipper) {
  if (isAnimating()) {
    int16_t ms = time_animating_ms();
    if (ms < 0 || ms > kSwitchAnimationMs) {
      // Done animating.
      anim_ = 0x8000;
    }
  }
  Widget::paintWidgetContents(canvas, clipper);
  if (isAnimating()) {
    markDirty();
  }
}

void Switch::paint(const Canvas& canvas) const {
  const Theme& th = theme();
  Color circleColor =
      isOn() ? th.color.highlighterColor(canvas.bgcolor()) : th.color.surface;
  Color sliderColor = isOn() ? th.color.highlighterColor(canvas.bgcolor())
                             : th.color.defaultColor(canvas.bgcolor());
  int16_t xoffset;
  if (isAnimating()) {
    int16_t ms = time_animating_ms();
    if (ms < 0 || ms > kSwitchAnimationMs) {
      xoffset = isOn() ? Scaled(20) : 0;
    } else {
      int16_t progress = Scaled(ms * 20) / kSwitchAnimationMs;
      xoffset = isOn() ? progress : Scaled(20) - progress;
    }
  } else {
    xoffset = isOn() ? Scaled(20) : 0;
  }
#if ROO_WINDOWS_ZOOM >= 200
  RleImage4bppxBiased<Alpha4, PrgMemResource> slider = slider_48();
  RleImage4bppxBiased<Alpha4, PrgMemResource> circle = circle_48();
  RleImage4bppxBiased<Alpha4, PrgMemResource> shadow = shadow_48();
#elif ROO_WINDOWS_ZOOM >= 150
  RleImage4bppxBiased<Alpha4, PrgMemResource> slider = slider_36();
  RleImage4bppxBiased<Alpha4, PrgMemResource> circle = circle_36();
  RleImage4bppxBiased<Alpha4, PrgMemResource> shadow = shadow_36();
#elif ROO_WINDOWS_ZOOM >= 100
  RleImage4bppxBiased<Alpha4, PrgMemResource> slider = slider_24();
  RleImage4bppxBiased<Alpha4, PrgMemResource> circle = circle_24();
  RleImage4bppxBiased<Alpha4, PrgMemResource> shadow = shadow_24();
#else
  RleImage4bppxBiased<Alpha4, PrgMemResource> slider = slider_18();
  RleImage4bppxBiased<Alpha4, PrgMemResource> circle = circle_18();
  RleImage4bppxBiased<Alpha4, PrgMemResource> shadow = shadow_18();
#endif
  slider.color_mode().setColor(sliderColor);
  circle.color_mode().setColor(circleColor);
  // leaving shadow as black.
  auto composite = MakeDrawableRawStreamable(
      Overlay(slider, Scaled(5), Scaled(5),
              Overlay(shadow, xoffset, 0, circle, xoffset, 0), 0, 0));
  roo_display::Tile toggle(&composite, Box(0, 0, Scaled(42), Scaled(24)),
                           kMiddle);
  canvas.drawTiled(toggle, bounds(), kCenter | kMiddle, isInvalidated());
}

Dimensions Switch::getSuggestedMinimumDimensions() const {
  return Dimensions(42, 24);
}

namespace {

// Image file circle_18 18x18, 4-bit Alpha,  RLE, 69 bytes.
static const uint8_t circle_18_data[] PROGMEM = {
    0x77, 0x74, 0x82, 0x35, 0x53, 0x75, 0x08, 0x0E, 0xC0, 0xE0, 0x87, 0x10,
    0x10, 0xCF, 0x90, 0xC0, 0x16, 0x0C, 0xFB, 0x0C, 0x50, 0x8F, 0xD0, 0x84,
    0x0E, 0xFD, 0x0E, 0x30, 0x3F, 0xF0, 0x32, 0x05, 0xFF, 0x05, 0x20, 0x5F,
    0xF0, 0x52, 0x03, 0xFF, 0x03, 0x30, 0xEF, 0xD0, 0xE4, 0x08, 0xFD, 0x08,
    0x50, 0xCF, 0xB0, 0xC6, 0x01, 0x0C, 0xF9, 0x0C, 0x01, 0x71, 0x08, 0x0E,
    0xC0, 0xE0, 0x87, 0x58, 0x23, 0x55, 0x37, 0x77, 0x40,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& circle_18() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      18, 18, circle_18_data, Alpha4(color::White));
  return value;
}

// Image file circle_24 24x24, 4-bit Alpha,  RLE, 92 bytes.
static const uint8_t circle_24_data[] PROGMEM = {
    0x80, 0xE4, 0x08, 0x63, 0x8B, 0xDD, 0xB8, 0x37, 0x70, 0x30, 0xCF, 0x90,
    0xC0, 0x37, 0x40, 0x6F, 0xD0, 0x67, 0x20, 0x6F, 0xF0, 0x67, 0x03, 0xFF,
    0xA0, 0x36, 0x0C, 0xFF, 0xA0, 0xC5, 0x03, 0xFF, 0xC0, 0x34, 0x08, 0xFF,
    0xC0, 0x84, 0x0B, 0xFF, 0xC0, 0xB4, 0x0D, 0xFF, 0xC0, 0xD4, 0x0D, 0xFF,
    0xC0, 0xD4, 0x0B, 0xFF, 0xC0, 0xB4, 0x08, 0xFF, 0xC0, 0x84, 0x03, 0xFF,
    0xC0, 0x35, 0x0C, 0xFF, 0xA0, 0xC6, 0x03, 0xFF, 0xA0, 0x37, 0x06, 0xFF,
    0x06, 0x72, 0x06, 0xFD, 0x06, 0x74, 0x03, 0x0C, 0xF9, 0x0C, 0x03, 0x77,
    0x86, 0x38, 0xBD, 0xDB, 0x83, 0x80, 0xE4, 0x00,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& circle_24() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      24, 24, circle_24_data, Alpha4(color::White));
  return value;
}

// Image file circle_36 36x36, 4-bit Alpha,  RLE, 170 bytes.
static const uint8_t circle_36_data[] PROGMEM = {
    0x80, 0x9E, 0x50, 0x89, 0x01, 0x69, 0xBC, 0xCB, 0x96, 0x17, 0x77, 0x30,
    0x40, 0xBF, 0xB0, 0xB0, 0x47, 0x76, 0x02, 0x0B, 0xFF, 0x0B, 0x02, 0x77,
    0x30, 0x50, 0xEF, 0xFA, 0x0E, 0x05, 0x77, 0x10, 0x7F, 0xFE, 0x07, 0x76,
    0x05, 0xFF, 0xF9, 0x05, 0x74, 0x02, 0x0E, 0xFF, 0xF9, 0x0E, 0x02, 0x73,
    0x0B, 0xFF, 0xFB, 0x0B, 0x72, 0x04, 0xFF, 0xFD, 0x04, 0x71, 0x0B, 0xFF,
    0xFD, 0x0B, 0x70, 0x1F, 0xFF, 0xF0, 0x16, 0x06, 0xFF, 0xFF, 0x06, 0x60,
    0x9F, 0xFF, 0xF0, 0x96, 0x0B, 0xFF, 0xFF, 0x0B, 0x60, 0xCF, 0xFF, 0xF0,
    0xC6, 0x0C, 0xFF, 0xFF, 0x0C, 0x60, 0xBF, 0xFF, 0xF0, 0xB6, 0x09, 0xFF,
    0xFF, 0x09, 0x60, 0x6F, 0xFF, 0xF0, 0x66, 0x01, 0xFF, 0xFF, 0x01, 0x70,
    0xBF, 0xFF, 0xD0, 0xB7, 0x10, 0x4F, 0xFF, 0xD0, 0x47, 0x20, 0xBF, 0xFF,
    0xB0, 0xB7, 0x30, 0x20, 0xEF, 0xFF, 0x90, 0xE0, 0x27, 0x40, 0x5F, 0xFF,
    0x90, 0x57, 0x60, 0x7F, 0xFE, 0x07, 0x77, 0x10, 0x50, 0xEF, 0xFA, 0x0E,
    0x05, 0x77, 0x30, 0x20, 0xBF, 0xF0, 0xB0, 0x27, 0x76, 0x04, 0x0B, 0xFB,
    0x0B, 0x04, 0x77, 0x73, 0x89, 0x01, 0x69, 0xBC, 0xCB, 0x96, 0x18, 0x09,
    0xE5, 0x00,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& circle_36() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      36, 36, circle_36_data, Alpha4(color::White));
  return value;
}

// Image file circle_48 48x48, 4-bit Alpha,  RLE, 255 bytes.
static const uint8_t circle_48_data[] PROGMEM = {
    0x80, 0xB9, 0x70, 0x89, 0x03, 0x68, 0xAB, 0xBA, 0x86, 0x37, 0x77, 0x77,
    0x81, 0x3A, 0xEF, 0xB8, 0x1E, 0xA3, 0x77, 0x77, 0x20, 0x40, 0xCF, 0xFA,
    0x0C, 0x04, 0x77, 0x75, 0x02, 0x0B, 0xFF, 0xE0, 0xB0, 0x27, 0x77, 0x20,
    0x40, 0xEF, 0xFF, 0x90, 0xE0, 0x47, 0x77, 0x06, 0xFF, 0xFD, 0x06, 0x77,
    0x50, 0x6F, 0xFF, 0xF0, 0x67, 0x73, 0x04, 0xFF, 0xFF, 0xA0, 0x47, 0x71,
    0x02, 0x0E, 0xFF, 0xFF, 0xA0, 0xE0, 0x27, 0x70, 0xBF, 0xFF, 0xFC, 0x0B,
    0x76, 0x04, 0xFF, 0xFF, 0xE0, 0x47, 0x50, 0xCF, 0xFF, 0xFE, 0x0C, 0x74,
    0x03, 0x80, 0xC0, 0xF0, 0x37, 0x30, 0xA8, 0x0C, 0x0F, 0x0A, 0x73, 0x0E,
    0x80, 0xC0, 0xF0, 0xE7, 0x20, 0x38, 0x0C, 0x2F, 0x03, 0x71, 0x06, 0x80,
    0xC2, 0xF0, 0x67, 0x10, 0x88, 0x0C, 0x2F, 0x08, 0x71, 0x0A, 0x80, 0xC2,
    0xF0, 0xA7, 0x10, 0xB8, 0x0C, 0x2F, 0x0B, 0x71, 0x0B, 0x80, 0xC2, 0xF0,
    0xB7, 0x10, 0xA8, 0x0C, 0x2F, 0x0A, 0x71, 0x08, 0x80, 0xC2, 0xF0, 0x87,
    0x10, 0x68, 0x0C, 0x2F, 0x06, 0x71, 0x03, 0x80, 0xC2, 0xF0, 0x37, 0x20,
    0xE8, 0x0C, 0x0F, 0x0E, 0x73, 0x0A, 0x80, 0xC0, 0xF0, 0xA7, 0x30, 0x38,
    0x0C, 0x0F, 0x03, 0x74, 0x0C, 0xFF, 0xFF, 0xE0, 0xC7, 0x50, 0x4F, 0xFF,
    0xFE, 0x04, 0x76, 0x0B, 0xFF, 0xFF, 0xC0, 0xB7, 0x70, 0x20, 0xEF, 0xFF,
    0xFA, 0x0E, 0x02, 0x77, 0x10, 0x4F, 0xFF, 0xFA, 0x04, 0x77, 0x30, 0x6F,
    0xFF, 0xF0, 0x67, 0x75, 0x06, 0xFF, 0xFD, 0x06, 0x77, 0x70, 0x40, 0xEF,
    0xFF, 0x90, 0xE0, 0x47, 0x77, 0x20, 0x20, 0xBF, 0xFE, 0x0B, 0x02, 0x77,
    0x75, 0x04, 0x0C, 0xFF, 0xA0, 0xC0, 0x47, 0x77, 0x72, 0x81, 0x3A, 0xEF,
    0xB8, 0x1E, 0xA3, 0x77, 0x77, 0x78, 0x90, 0x36, 0x8A, 0xBB, 0xA8, 0x63,
    0x80, 0xB9, 0x70,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& circle_48() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      48, 48, circle_48_data, Alpha4(color::White));
  return value;
}

// Image file shadow_18 18x18, 4-bit Alpha,  RLE, 124 bytes.
static const uint8_t shadow_18_data[] PROGMEM = {
    0x77, 0x74, 0x83, 0x12, 0x22, 0x17, 0x48, 0x72, 0x46, 0x77, 0x75, 0x31,
    0x71, 0x89, 0x13, 0x69, 0xBC, 0xCB, 0xA8, 0x52, 0x68, 0x93, 0x37, 0xBC,
    0xDE, 0xEE, 0xDC, 0xA6, 0x24, 0x84, 0x26, 0xBD, 0xEE, 0xB8, 0x4E, 0xEC,
    0x95, 0x13, 0x82, 0x49, 0xCE, 0xE8, 0x3E, 0xEC, 0x82, 0x28, 0x31, 0x6B,
    0xDE, 0xF8, 0x2E, 0xD9, 0x42, 0x82, 0x27, 0xCE, 0xF9, 0x89, 0x0E, 0xDA,
    0x51, 0x02, 0x7C, 0xEF, 0xA8, 0x7D, 0xB5, 0x10, 0x27, 0xBE, 0xF9, 0x82,
    0xED, 0xA5, 0x28, 0x31, 0x5A, 0xDE, 0xF8, 0x2E, 0xC9, 0x43, 0x83, 0x38,
    0xCE, 0xED, 0x83, 0xED, 0xB7, 0x23, 0x89, 0x41, 0x5A, 0xCE, 0xEE, 0xFE,
    0xED, 0xC8, 0x45, 0x89, 0x32, 0x69, 0xCD, 0xDD, 0xDC, 0xB8, 0x41, 0x68,
    0x91, 0x25, 0x89, 0xAB, 0xA9, 0x74, 0x17, 0x18, 0x61, 0x24, 0x55, 0x54,
    0x27, 0x60, 0x01, 0x71,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& shadow_18() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      18, 18, shadow_18_data, Alpha4(color::Black));
  return value;
}

// Image file shadow_24 24x24, 4-bit Alpha,  RLE, 202 bytes.
static const uint8_t shadow_24_data[] PROGMEM = {
    0x80, 0xC0, 0x00, 0x17, 0x75, 0x87, 0x12, 0x34, 0x43, 0x32, 0x17, 0x68,
    0x93, 0x13, 0x46, 0x78, 0x88, 0x76, 0x42, 0x17, 0x38, 0x32, 0x46, 0x8A,
    0x80, 0x1B, 0x83, 0xA8, 0x63, 0x17, 0x18, 0x42, 0x47, 0xAB, 0xC8, 0x01,
    0xD8, 0x4C, 0xB9, 0x74, 0x16, 0x84, 0x14, 0x7A, 0xCD, 0x80, 0x3E, 0x84,
    0xDC, 0xA7, 0x31, 0x58, 0x53, 0x6A, 0xCD, 0xEE, 0xD8, 0x5E, 0xED, 0xC9,
    0x62, 0x48, 0x41, 0x48, 0xBD, 0xEF, 0x98, 0x5E, 0xED, 0xB8, 0x41, 0x38,
    0x42, 0x6A, 0xCE, 0xEF, 0xA8, 0x4E, 0xEC, 0x95, 0x23, 0x83, 0x37, 0xBD,
    0xEF, 0xC8, 0x3E, 0xDA, 0x73, 0x38, 0x34, 0x8B, 0xDE, 0xFC, 0x83, 0xED,
    0xB7, 0x32, 0x84, 0x14, 0x8B, 0xDE, 0xFC, 0x83, 0xED, 0xB8, 0x33, 0x83,
    0x38, 0xBD, 0xEF, 0xC8, 0x3E, 0xDB, 0x73, 0x38, 0x33, 0x7B, 0xDE, 0xFC,
    0x83, 0xED, 0xA7, 0x23, 0x84, 0x26, 0xAC, 0xEE, 0xFA, 0x84, 0xEE, 0xC9,
    0x52, 0x38, 0x51, 0x48, 0xBD, 0xEE, 0xF8, 0x5E, 0xED, 0xB8, 0x41, 0x48,
    0x52, 0x69, 0xCD, 0xEE, 0xD8, 0x5E, 0xED, 0xC9, 0x52, 0x58, 0x41, 0x37,
    0xAC, 0xD8, 0x03, 0xE8, 0x4D, 0xC9, 0x63, 0x16, 0x84, 0x14, 0x79, 0xBC,
    0x80, 0x1D, 0x84, 0xCB, 0x96, 0x31, 0x71, 0x89, 0x51, 0x36, 0x89, 0xAB,
    0xBB, 0xA9, 0x85, 0x31, 0x73, 0x89, 0x31, 0x24, 0x57, 0x78, 0x77, 0x54,
    0x21, 0x76, 0x87, 0x12, 0x33, 0x33, 0x22, 0x17, 0x77, 0x73,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& shadow_24() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      24, 24, shadow_24_data, Alpha4(color::Black));
  return value;
}

// Image file shadow_36 36x36, 4-bit Alpha,  RLE, 412 bytes.
static const uint8_t shadow_36_data[] PROGMEM = {
    0x80, 0x9A, 0x40, 0x80, 0x11, 0x77, 0x76, 0x82, 0x11, 0x22, 0x80, 0x13,
    0x82, 0x22, 0x11, 0x77, 0x78, 0x97, 0x11, 0x23, 0x45, 0x56, 0x66, 0x55,
    0x44, 0x32, 0x17, 0x74, 0x8A, 0x11, 0x23, 0x56, 0x78, 0x89, 0x99, 0x98,
    0x76, 0x54, 0x31, 0x77, 0x28, 0x61, 0x34, 0x67, 0x9A, 0xA8, 0x01, 0xB8,
    0x7A, 0xA9, 0x87, 0x53, 0x21, 0x76, 0x8A, 0x62, 0x35, 0x79, 0xAB, 0xBC,
    0xCD, 0xDD, 0xCC, 0xCB, 0xA9, 0x76, 0x42, 0x17, 0x48, 0xB0, 0x13, 0x57,
    0x9B, 0xCC, 0xDD, 0xDE, 0xEE, 0xDD, 0xDC, 0xCB, 0xA8, 0x64, 0x21, 0x72,
    0x87, 0x13, 0x57, 0x9B, 0xCD, 0xD8, 0x05, 0xE8, 0x7D, 0xDC, 0xBA, 0x86,
    0x32, 0x71, 0x86, 0x12, 0x47, 0x9B, 0xCD, 0x80, 0x0E, 0xD8, 0x00, 0xE8,
    0x6D, 0xCB, 0xA8, 0x53, 0x17, 0x85, 0x13, 0x69, 0xBC, 0xD0, 0xFE, 0xFA,
    0x0F, 0xE8, 0x5D, 0xCB, 0x97, 0x42, 0x68, 0x51, 0x25, 0x7A, 0xCD, 0x0F,
    0xEF, 0xC0, 0xFE, 0x85, 0xDC, 0xA8, 0x63, 0x15, 0x87, 0x13, 0x69, 0xBC,
    0xDE, 0xEF, 0xE0, 0xFE, 0x84, 0xDB, 0x97, 0x42, 0x58, 0x62, 0x47, 0xAB,
    0xDE, 0xEF, 0xF9, 0x86, 0xEE, 0xDC, 0xA8, 0x52, 0x58, 0x62, 0x58, 0xAC,
    0xDE, 0xEF, 0xFA, 0x86, 0xED, 0xCB, 0x96, 0x31, 0x38, 0x61, 0x35, 0x8B,
    0xCD, 0xEF, 0xFB, 0x86, 0xEE, 0xDB, 0x96, 0x31, 0x38, 0x61, 0x36, 0x9B,
    0xDE, 0xEF, 0xFB, 0x86, 0xEE, 0xDB, 0x97, 0x41, 0x38, 0x61, 0x36, 0x9B,
    0xDE, 0xEF, 0xFB, 0x86, 0xEE, 0xDC, 0xA7, 0x41, 0x38, 0x61, 0x36, 0x9B,
    0xDE, 0xEF, 0xFB, 0x86, 0xEE, 0xDC, 0xA7, 0x41, 0x38, 0x61, 0x35, 0x9B,
    0xCD, 0xEF, 0xFB, 0x86, 0xEE, 0xDB, 0x96, 0x41, 0x48, 0x62, 0x58, 0xAC,
    0xDE, 0xEF, 0xFA, 0x86, 0xED, 0xDB, 0x96, 0x31, 0x48, 0x62, 0x47, 0xAC,
    0xDE, 0xEF, 0xF9, 0x87, 0xEE, 0xDC, 0xB8, 0x53, 0x14, 0x87, 0x14, 0x69,
    0xBC, 0xDE, 0xEF, 0xF8, 0x6E, 0xED, 0xCA, 0x74, 0x25, 0x85, 0x13, 0x58,
    0xAC, 0xD0, 0xFE, 0xFD, 0x87, 0xEE, 0xDC, 0xB9, 0x63, 0x16, 0x85, 0x24,
    0x79, 0xBC, 0xD0, 0xFE, 0xFB, 0x89, 0x0E, 0xED, 0xDB, 0xA7, 0x52, 0x16,
    0x86, 0x13, 0x57, 0xAB, 0xCD, 0x0F, 0xEF, 0x0F, 0xE8, 0x6D, 0xDC, 0xA8,
    0x63, 0x17, 0x18, 0x61, 0x36, 0x8A, 0xBC, 0xD8, 0x07, 0xE8, 0x6D, 0xDC,
    0xA9, 0x64, 0x27, 0x38, 0x52, 0x46, 0x8A, 0xBC, 0x0F, 0xD8, 0x01, 0xE0,
    0xFD, 0x86, 0xCB, 0xA9, 0x74, 0x21, 0x73, 0x89, 0x01, 0x24, 0x68, 0x9A,
    0xBC, 0xC8, 0x02, 0xD8, 0x7C, 0xCB, 0xA8, 0x64, 0x31, 0x75, 0x8A, 0x51,
    0x23, 0x57, 0x89, 0xAB, 0xBB, 0xCC, 0xBB, 0xBA, 0x97, 0x64, 0x21, 0x77,
    0x8A, 0x31, 0x23, 0x46, 0x78, 0x99, 0x9A, 0xA9, 0x98, 0x76, 0x53, 0x21,
    0x77, 0x38, 0x97, 0x12, 0x34, 0x56, 0x67, 0x77, 0x66, 0x54, 0x32, 0x17,
    0x77, 0x89, 0x41, 0x22, 0x33, 0x44, 0x44, 0x33, 0x21, 0x17, 0x77, 0x48,
    0x04, 0x18, 0x0D, 0x50,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& shadow_36() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      36, 36, shadow_36_data, Alpha4(color::Black));
  return value;
}

// Image file shadow_48 48x48, 4-bit Alpha,  RLE, 702 bytes.
static const uint8_t shadow_48_data[] PROGMEM = {
    0x80, 0xAC, 0x10, 0x80, 0x41, 0x80, 0xC0, 0x00, 0xF1, 0x0F, 0x28, 0x00,
    0x30, 0xF2, 0x0F, 0x17, 0x77, 0x72, 0x8A, 0x21, 0x12, 0x33, 0x44, 0x45,
    0x55, 0x54, 0x44, 0x33, 0x21, 0x17, 0x77, 0x58, 0x71, 0x12, 0x34, 0x55,
    0x66, 0x80, 0x27, 0x87, 0x66, 0x54, 0x43, 0x21, 0x17, 0x77, 0x28, 0x90,
    0x12, 0x34, 0x56, 0x77, 0x88, 0x80, 0x29, 0x89, 0x08, 0x87, 0x76, 0x54,
    0x32, 0x17, 0x76, 0x89, 0x21, 0x12, 0x45, 0x67, 0x89, 0x9A, 0xA8, 0x02,
    0xB8, 0x91, 0xAA, 0x99, 0x87, 0x64, 0x32, 0x17, 0x74, 0x89, 0x21, 0x23,
    0x45, 0x78, 0x9A, 0xAB, 0xB8, 0x04, 0xC8, 0x91, 0xBB, 0xAA, 0x98, 0x65,
    0x42, 0x17, 0x72, 0x89, 0x01, 0x23, 0x46, 0x78, 0xAA, 0xB0, 0xFC, 0x80,
    0x4D, 0x0F, 0xC8, 0x7B, 0xA9, 0x87, 0x54, 0x21, 0x77, 0x18, 0x90, 0x13,
    0x46, 0x79, 0xAB, 0xCC, 0x80, 0x0D, 0x80, 0x2E, 0x80, 0x0D, 0x89, 0x0C,
    0xBB, 0xA8, 0x75, 0x42, 0x17, 0x68, 0x71, 0x24, 0x67, 0x9A, 0xBC, 0x0F,
    0xD8, 0x09, 0x0E, 0x89, 0x2D, 0xDC, 0xCB, 0xA9, 0x75, 0x42, 0x17, 0x48,
    0x91, 0x12, 0x45, 0x79, 0xAB, 0xCD, 0xD8, 0x03, 0xEA, 0x80, 0x2E, 0x0F,
    0xD8, 0x6C, 0xBA, 0x87, 0x53, 0x27, 0x48, 0x90, 0x13, 0x57, 0x8A, 0xBC,
    0xDD, 0x80, 0x0E, 0xFA, 0x80, 0x1E, 0x89, 0x0D, 0xDC, 0xBA, 0x86, 0x43,
    0x17, 0x28, 0x90, 0x12, 0x46, 0x8A, 0xBC, 0xDD, 0x0F, 0xEF, 0xE8, 0x00,
    0xE8, 0x90, 0xDD, 0xCB, 0x97, 0x53, 0x21, 0x71, 0x87, 0x13, 0x57, 0x9A,
    0xCD, 0xD0, 0xFE, 0xFF, 0x98, 0x00, 0xE8, 0x7D, 0xCB, 0xA9, 0x64, 0x31,
    0x78, 0x71, 0x24, 0x68, 0xAB, 0xCD, 0x0F, 0xEF, 0xFB, 0x0F, 0xE8, 0x7D,
    0xDC, 0xB9, 0x75, 0x32, 0x78, 0x91, 0x13, 0x57, 0x9A, 0xCD, 0xDE, 0xEF,
    0xFD, 0x0F, 0xE8, 0x7D, 0xCB, 0xA8, 0x64, 0x21, 0x68, 0x61, 0x35, 0x79,
    0xBC, 0xD0, 0xFE, 0xFF, 0xE8, 0x91, 0xEE, 0xDD, 0xCB, 0x97, 0x53, 0x16,
    0x89, 0x02, 0x46, 0x8A, 0xBC, 0xDE, 0xEF, 0xFF, 0x0F, 0xE8, 0x6D, 0xCB,
    0x98, 0x53, 0x15, 0x89, 0x11, 0x24, 0x68, 0xAC, 0xDD, 0xEE, 0xFF, 0xF9,
    0x89, 0x0E, 0xED, 0xCB, 0xA8, 0x64, 0x25, 0x86, 0x12, 0x47, 0x9B, 0xCD,
    0x0F, 0xEF, 0xFF, 0x98, 0x91, 0xEE, 0xDD, 0xCA, 0x86, 0x42, 0x14, 0x86,
    0x13, 0x57, 0x9B, 0xCD, 0x0F, 0xEF, 0xFF, 0x98, 0x91, 0xEE, 0xDD, 0xCA,
    0x96, 0x42, 0x14, 0x89, 0x01, 0x35, 0x79, 0xBC, 0xDE, 0xEF, 0xFF, 0xA0,
    0xFE, 0x86, 0xDC, 0xA9, 0x64, 0x21, 0x48, 0x90, 0x13, 0x57, 0x9B, 0xCD,
    0xEE, 0xFF, 0xFA, 0x0F, 0xE8, 0x6D, 0xCA, 0x96, 0x42, 0x14, 0x86, 0x13,
    0x57, 0x9B, 0xCD, 0x0F, 0xEF, 0xFF, 0x98, 0x91, 0xEE, 0xDD, 0xCA, 0x96,
    0x42, 0x14, 0x86, 0x12, 0x47, 0x9B, 0xCD, 0x0F, 0xEF, 0xFF, 0x98, 0x91,
    0xEE, 0xDD, 0xCA, 0x86, 0x42, 0x14, 0x89, 0x11, 0x24, 0x68, 0xAC, 0xDD,
    0xEE, 0xFF, 0xF9, 0x89, 0x0E, 0xED, 0xCB, 0xA8, 0x64, 0x26, 0x86, 0x24,
    0x68, 0xAB, 0xCD, 0x0F, 0xEF, 0xFE, 0x0F, 0xE8, 0x6D, 0xCB, 0x97, 0x53,
    0x16, 0x86, 0x13, 0x57, 0x9B, 0xCD, 0x0F, 0xEF, 0xFE, 0x89, 0x1E, 0xED,
    0xDC, 0xB9, 0x75, 0x31, 0x68, 0x71, 0x34, 0x79, 0xAC, 0xDD, 0x0F, 0xEF,
    0xFC, 0x0F, 0xE8, 0x7D, 0xCB, 0xA8, 0x64, 0x21, 0x68, 0x90, 0x12, 0x46,
    0x8A, 0xBC, 0xDD, 0x0F, 0xEF, 0xFA, 0x0F, 0xE8, 0x7D, 0xDC, 0xB9, 0x75,
    0x31, 0x71, 0x87, 0x13, 0x57, 0x9A, 0xBC, 0xD8, 0x00, 0xEF, 0xF0, 0xFE,
    0x89, 0x0D, 0xDC, 0xBA, 0x86, 0x42, 0x17, 0x18, 0x90, 0x12, 0x46, 0x89,
    0xBC, 0xDD, 0x80, 0x0E, 0xFD, 0x80, 0x0E, 0x87, 0xDC, 0xBA, 0x97, 0x53,
    0x27, 0x38, 0x90, 0x13, 0x46, 0x8A, 0xBC, 0xDD, 0x80, 0x1E, 0xF9, 0x80,
    0x0E, 0x89, 0x1D, 0xDC, 0xCB, 0x98, 0x64, 0x21, 0x73, 0x87, 0x12, 0x35,
    0x78, 0xAB, 0xC0, 0xFD, 0x80, 0x92, 0xE8, 0x91, 0xDD, 0xCC, 0xBA, 0x86,
    0x53, 0x17, 0x58, 0x90, 0x12, 0x45, 0x79, 0xAB, 0xCC, 0x0F, 0xD8, 0x06,
    0xE0, 0xFD, 0x89, 0x0C, 0xBB, 0xA8, 0x75, 0x32, 0x17, 0x68, 0x91, 0x12,
    0x45, 0x78, 0xAB, 0xBC, 0xC8, 0x01, 0xD0, 0x0E, 0x80, 0x1D, 0x89, 0x1C,
    0xCB, 0xA9, 0x87, 0x53, 0x21, 0x77, 0x18, 0x90, 0x12, 0x45, 0x78, 0x9A,
    0xBB, 0x0F, 0xC8, 0x02, 0xD0, 0xFC, 0x89, 0x0B, 0xBA, 0x98, 0x65, 0x32,
    0x17, 0x73, 0x87, 0x12, 0x45, 0x67, 0x99, 0xA0, 0xFB, 0x80, 0x2C, 0x0F,
    0xB8, 0x7A, 0x98, 0x76, 0x53, 0x21, 0x77, 0x58, 0x90, 0x12, 0x34, 0x56,
    0x78, 0x99, 0x80, 0x4A, 0x89, 0x09, 0x98, 0x76, 0x54, 0x32, 0x17, 0x77,
    0x8B, 0x01, 0x23, 0x34, 0x56, 0x78, 0x88, 0x99, 0x99, 0x88, 0x77, 0x65,
    0x43, 0x21, 0x17, 0x77, 0x38, 0x51, 0x23, 0x34, 0x55, 0x80, 0x46, 0x85,
    0x55, 0x43, 0x22, 0x17, 0x77, 0x68, 0x41, 0x12, 0x23, 0x38, 0x04, 0x48,
    0x33, 0x32, 0x11, 0x77, 0x77, 0x40, 0xF1, 0x80, 0x42, 0x0F, 0x18, 0x0C,
    0x20, 0x80, 0x21, 0x80, 0x98, 0x00,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& shadow_48() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      48, 48, shadow_48_data, Alpha4(color::Black));
  return value;
}

// Image file slider_18 26x11, 4-bit Alpha,  RLE, 53 bytes.
static const uint8_t slider_18_data[] PROGMEM = {
    0x30, 0x18, 0x09, 0x63, 0x01, 0x50, 0x38, 0x0A, 0x06, 0x03, 0x30,
    0x38, 0x0A, 0x26, 0x81, 0x30, 0x18, 0x0A, 0x46, 0x01, 0x03, 0x80,
    0xA4, 0x60, 0x03, 0x80, 0xA4, 0x60, 0x03, 0x80, 0xA4, 0x60, 0x30,
    0x18, 0x0A, 0x46, 0x81, 0x10, 0x38, 0x0A, 0x26, 0x03, 0x30, 0x38,
    0x0A, 0x06, 0x03, 0x50, 0x18, 0x09, 0x63, 0x01, 0x30,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& slider_18() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      26, 11, slider_18_data, Alpha4(color::White));
  return value;
}

// Image file slider_24 34x14, 4-bit Alpha,  RLE, 77 bytes.
static const uint8_t slider_24_data[] PROGMEM = {
    0x48, 0x13, 0x55, 0x80, 0xA0, 0x68, 0x15, 0x53, 0x60, 0x20, 0x58,
    0x0A, 0x66, 0x05, 0x02, 0x30, 0x28, 0x0B, 0x26, 0x02, 0x20, 0x58,
    0x0B, 0x26, 0x81, 0x50, 0x38, 0x0B, 0x46, 0x03, 0x05, 0x80, 0xB4,
    0x60, 0x05, 0x80, 0xB4, 0x60, 0x05, 0x80, 0xB4, 0x60, 0x05, 0x80,
    0xB4, 0x60, 0x50, 0x38, 0x0B, 0x46, 0x81, 0x30, 0x58, 0x0B, 0x26,
    0x05, 0x20, 0x28, 0x0B, 0x26, 0x02, 0x30, 0x20, 0x58, 0x0A, 0x66,
    0x05, 0x02, 0x68, 0x13, 0x55, 0x80, 0xA0, 0x68, 0x15, 0x53, 0x40,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& slider_24() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      34, 14, slider_24_data, Alpha4(color::White));
  return value;
}

// Image file slider_36 52x22, 4-bit Alpha,  RLE, 118 bytes.
static const uint8_t slider_36_data[] PROGMEM = {
    0x71, 0x01, 0x80, 0xB6, 0x30, 0x17, 0x70, 0x30, 0x58, 0x0C, 0x06, 0x05,
    0x03, 0x73, 0x02, 0x05, 0x80, 0xC4, 0x60, 0x50, 0x27, 0x03, 0x80, 0xD0,
    0x60, 0x35, 0x02, 0x80, 0xD2, 0x60, 0x24, 0x05, 0x80, 0xD2, 0x60, 0x53,
    0x03, 0x80, 0xD4, 0x60, 0x32, 0x05, 0x80, 0xD4, 0x68, 0x15, 0x01, 0x80,
    0xD6, 0x60, 0x10, 0x38, 0x0D, 0x66, 0x00, 0x38, 0x0D, 0x66, 0x00, 0x38,
    0x0D, 0x66, 0x00, 0x38, 0x0D, 0x66, 0x03, 0x01, 0x80, 0xD6, 0x68, 0x11,
    0x05, 0x80, 0xD4, 0x60, 0x52, 0x03, 0x80, 0xD4, 0x60, 0x33, 0x05, 0x80,
    0xD2, 0x60, 0x54, 0x02, 0x80, 0xD2, 0x60, 0x25, 0x03, 0x80, 0xD0, 0x60,
    0x37, 0x02, 0x05, 0x80, 0xC4, 0x60, 0x50, 0x27, 0x30, 0x30, 0x58, 0x0C,
    0x06, 0x05, 0x03, 0x77, 0x01, 0x80, 0xB6, 0x30, 0x17, 0x10,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& slider_36() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      52, 22, slider_36_data, Alpha4(color::White));
  return value;
}

// Image file slider_48 68x28, 4-bit Alpha,  RLE, 163 bytes.
static const uint8_t slider_48_data[] PROGMEM = {
    0x72, 0x82, 0x13, 0x45, 0x80, 0xC6, 0x68, 0x25, 0x43, 0x17, 0x72, 0x02,
    0x05, 0x80, 0xD6, 0x60, 0x50, 0x27, 0x50, 0x10, 0x48, 0x0E, 0x26, 0x04,
    0x01, 0x72, 0x01, 0x05, 0x80, 0xE4, 0x60, 0x50, 0x17, 0x01, 0x05, 0x80,
    0xE6, 0x60, 0x50, 0x15, 0x01, 0x05, 0x80, 0xF0, 0x60, 0x50, 0x14, 0x04,
    0x80, 0xF2, 0x60, 0x43, 0x02, 0x80, 0xF4, 0x60, 0x22, 0x05, 0x80, 0xF4,
    0x68, 0x15, 0x01, 0x80, 0xF6, 0x60, 0x10, 0x38, 0x0F, 0x66, 0x03, 0x04,
    0x80, 0xF6, 0x60, 0x40, 0x58, 0x0F, 0x66, 0x05, 0x80, 0xA8, 0x46, 0x05,
    0x80, 0xF6, 0x60, 0x50, 0x48, 0x0F, 0x66, 0x04, 0x03, 0x80, 0xF6, 0x60,
    0x30, 0x18, 0x0F, 0x66, 0x81, 0x10, 0x58, 0x0F, 0x46, 0x05, 0x20, 0x28,
    0x0F, 0x46, 0x02, 0x30, 0x48, 0x0F, 0x26, 0x04, 0x40, 0x10, 0x58, 0x0F,
    0x06, 0x05, 0x01, 0x50, 0x10, 0x58, 0x0E, 0x66, 0x05, 0x01, 0x70, 0x10,
    0x58, 0x0E, 0x46, 0x05, 0x01, 0x72, 0x01, 0x04, 0x80, 0xE2, 0x60, 0x40,
    0x17, 0x50, 0x20, 0x58, 0x0D, 0x66, 0x05, 0x02, 0x77, 0x28, 0x21, 0x34,
    0x58, 0x0C, 0x66, 0x82, 0x54, 0x31, 0x72,
};

const RleImage4bppxBiased<Alpha4, PrgMemResource>& slider_48() {
  static RleImage4bppxBiased<Alpha4, PrgMemResource> value(
      68, 28, slider_48_data, Alpha4(color::White));
  return value;
}

}  // namespace

}  // namespace roo_windows